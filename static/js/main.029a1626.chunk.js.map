{"version":3,"sources":["constants.js","components/Card/Card.js","components/util.js","components/Map/CircleMap.js","components/Charts/Chart.js","components/Table/Table.js","App.js","index.js"],"names":["latlong","statecode","name","lat","long","StatusCard","title","isColor1","isColor2","isColor3","isColor4","cases","active","onClick","isDark","Card","className","CardContent","Typography","color","prettyNumber","stat","numeral","format","casesTypeValues","multiplier","confirmed","recovered","deaths","CircleMap","casesType","center","mapData","zoomControl","key","zoom","maxZoom","doubleClickZoom","scrollWheelZoom","dragging","animate","minZoom","attributionControl","bounds","TileLayer","url","attribution","data","map","state","i","Circle","lng","fillOpacity","stroke","fillColor","radius","Math","sqrt","Popup","showCirclesOnMap","options","bezierCurve","legend","display","responsive","maintainAspectRatio","scales","xAxes","ticks","gridLines","drawBorder","yAxes","Charts","lineChart1","cases_time_series","labels","date","datasets","dailydeceased","label","borderColor","fill","backgroundColor","borderWidth","text","fontColor","fontSize","position","lineChart2","dailyconfirmed","lineChart3","dailyrecovered","inrformat","require","headerColumns","id","align","value","toLocaleString","StateInfoTable","states","classes","makeStyles","tablecontainer","borderRadius","boxShadow","marginBottom","marginTop","height","oddRow","evenRow","cellOfROw","border","useStyles","TableContainer","Table","stickyHeader","aria-aria-label","TableHead","TableRow","column","TableCell","style","TableBody","random","App","useState","setData","JSON","parse","localStorage","getItem","darkMode","setDarkMode","window","innerWidth","windowWidth","setWindowWidth","setStatesData","selectedState","setSelectedState","selectedStateInfo","setSelectedStateInfo","setCasesType","mapCenter","setMapCenter","useEffect","setItem","stringify","handleResize","e","addEventListener","fetch","then","response","json","DataofStates","statewise","length","j","temp","push","countrySelect","FormControl","Select","variant","onChange","event","stateCodeOfSelectedState","target","console","log","stateData","filter","MenuItem","FormHelperText","type","checked","prevmode","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.029a1626.chunk.js","sourcesContent":["export const latlong = [\r\n  { statecode: \"TT\", name: \"Total\", lat: 24.070541, long: 83.003948 },\r\n  {\r\n    statecode: \"MH\",\r\n    name: \"Maharashtra\",\r\n    lat: 19.076,\r\n    long: 72.8777,\r\n  },\r\n  {\r\n    statecode: \"AP\",\r\n    name: \"Andhra Pradesh\",\r\n    lat: 14.7504291,\r\n    long: 78.57002559,\r\n  },\r\n  {\r\n    statecode: \"KA\",\r\n    name: \"Karnataka\",\r\n    lat: 12.57038129,\r\n    long: 76.91999711,\r\n  },\r\n  {\r\n    statecode: \"TN\",\r\n    name: \"Tamil Nadu\",\r\n    lat: 13.0827,\r\n    long: 80.2707,\r\n  },\r\n  {\r\n    statecode: \"UP\",\r\n    name: \"Uttar Pradesh\",\r\n    lat: 27.59998069,\r\n    long: 78.05000565,\r\n  },\r\n  {\r\n    statecode: \"DL\",\r\n    name: \"Delhi\",\r\n    lat: 28.6699929,\r\n    long: 77.23000403,\r\n  },\r\n  {\r\n    statecode: \"WB\",\r\n    name: \"West Bengal\",\r\n    lat: 22.58039044,\r\n    long: 88.32994665,\r\n  },\r\n  { statecode: \"OR\", name: \"Odisha\", lat: 20.94092, long: 84.803467 },\r\n  {\r\n    statecode: \"KL\",\r\n    name: \"Kerala\",\r\n    lat: 8.5241,\r\n    long: 76.9366,\r\n  },\r\n  {\r\n    statecode: \"TG\",\r\n    name: \"Telangana\",\r\n    lat: 18.1124,\r\n    long: 79.0193,\r\n  },\r\n  {\r\n    statecode: \"BR\",\r\n    name: \"Bihar\",\r\n    lat: 25.5941,\r\n    long: 85.1376,\r\n  },\r\n  { statecode: \"AS\", name: \"Assam\", lat: 26.244156, long: 92.537842 },\r\n\r\n  { statecode: \"GJ\", name: \"Gujarat\", lat: 22.309425, long: 72.13623 },\r\n  {\r\n    statecode: \"RJ\",\r\n    name: \"Rajasthan\",\r\n    lat: 25.9124,\r\n    long: 73.7873,\r\n  },\r\n  {\r\n    statecode: \"MP\",\r\n    name: \"Madhya Pradesh\",\r\n    lat: 23.2599,\r\n    long: 77.4126,\r\n  },\r\n  {\r\n    statecode: \"HR\",\r\n    name: \"Haryana\",\r\n    lat: 28.45000633,\r\n    long: 77.01999101,\r\n  },\r\n  {\r\n    statecode: \"CT\",\r\n    name: \"Chhattisgarh\",\r\n    lat: 21.295132,\r\n    long: 81.828232,\r\n  },\r\n  {\r\n    statecode: \"PB\",\r\n    name: \"Punjab\",\r\n    lat: 31.51997398,\r\n    long: 75.98000281,\r\n  },\r\n  {\r\n    statecode: \"JH\",\r\n    name: \"Jharkhand\",\r\n    lat: 23.80039349,\r\n    long: 86.41998572,\r\n  },\r\n  {\r\n    statecode: \"JK\",\r\n    name: \"Jammu and Kashmir\",\r\n    lat: 34.29995933,\r\n    long: 74.46665849,\r\n  },\r\n  {\r\n    statecode: \"UT\",\r\n    name: \"Uttarakhand\",\r\n    lat: 26.8467,\r\n    long: 80.9462,\r\n  },\r\n  { statecode: \"GA\", name: \"Goa\", lat: 15.491997, long: 73.81800065 },\r\n  {\r\n    statecode: \"PY\",\r\n    name: \"Puducherry\",\r\n    lat: 11.93499371,\r\n    long: 79.83000037,\r\n  },\r\n  {\r\n    statecode: \"TR\",\r\n    name: \"Tripura\",\r\n    lat: 23.83540428,\r\n    long: 91.27999914,\r\n  },\r\n  {\r\n    statecode: \"HP\",\r\n    name: \"Himachal Pradesh\",\r\n    lat: 31.10002545,\r\n    long: 77.571167,\r\n  },\r\n  {\r\n    statecode: \"CH\",\r\n    name: \"Chandigarh\",\r\n    lat: 30.71999697,\r\n    long: 77.16659704,\r\n  },\r\n  {\r\n    statecode: \"MN\",\r\n    name: \"Manipur\",\r\n    lat: 24.79997072,\r\n    long: 93.95001705,\r\n  },\r\n  {\r\n    statecode: \"AR\",\r\n    name: \"Arunachal Pradesh\",\r\n    lat: 27.10039878,\r\n    long: 93.61660071,\r\n  },\r\n  {\r\n    statecode: \"NL\",\r\n    name: \"Nagaland\",\r\n    lat: 25.6669979,\r\n    long: 94.11657019,\r\n  },\r\n  {\r\n    statecode: \"ML\",\r\n    name: \"Meghalaya\",\r\n    lat: 25.57049217,\r\n    long: 91.8800142,\r\n  },\r\n  { statecode: \"LA\", name: \"Ladakh\", lat: 34.209515, long: 77.615112 },\r\n  {\r\n    statecode: \"AN\",\r\n    name: \"Andaman and Nicobar Islands\",\r\n    lat: 11.66702557,\r\n    long: 92.73598262,\r\n  },\r\n  {\r\n    statecode: \"DN\",\r\n    name: \"Dadra and Nagar Haveli and Daman and Diu\",\r\n    lat: 20.26657819,\r\n    long: 73.0166178,\r\n  },\r\n  {\r\n    statecode: \"SK\",\r\n    name: \"Sikkim\",\r\n    lat: 27.3333303,\r\n    long: 88.6166475,\r\n  },\r\n  {\r\n    statecode: \"MZ\",\r\n    name: \"Mizoram\",\r\n    lat: 23.71039899,\r\n    long: 92.72001461,\r\n  },\r\n  { statecode: \"UN\", name: \"State Unassigned\", lat: 0, long: 0 },\r\n  {\r\n    statecode: \"LD\",\r\n    name: \"Lakshadweep\",\r\n    lat: 10.56257331,\r\n    long: 72.63686717,\r\n  },\r\n];\r\n","import Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport default function StatusCard({\r\n  title,\r\n  isColor1,\r\n  isColor2,\r\n  isColor3,\r\n  isColor4,\r\n  cases,\r\n  active,\r\n  onClick,\r\n  isDark,\r\n}) {\r\n  return (\r\n    <Card\r\n      onClick={onClick}\r\n      className={`card ${isDark && \"card--darkmode\"} ${\r\n        active && \"card--selected\"\r\n      }\r\n       ${isColor2 && \"card--color2\"}\r\n      ${isColor3 && \"card--color3\"}\r\n      ${isColor4 && \"card--color4\"}`}\r\n    >\r\n      <CardContent>\r\n        <Typography\r\n          className={`card_title ${isDark && \"card--darkmode\"}`}\r\n          color=\"textSecondary\"\r\n        >\r\n          {title}\r\n        </Typography>\r\n        <h2\r\n          className={`\r\n      ${isColor1 && \"card_color1\"}\r\n      ${isColor2 && \"card_color2\"}\r\n      ${isColor3 && \"card_color3\"}\r\n      ${isColor4 && \"card_color4\"}`}\r\n        >\r\n          {cases}\r\n        </h2>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nexport const prettyNumber = (stat) =>\r\n  stat ? `${numeral(stat).format(\"0a\")}` : \"+0\";\r\n\r\nconst casesTypeValues = {\r\n  active: {\r\n    color: \"#a820ff\",\r\n    multiplier: 800,\r\n  },\r\n  confirmed: {\r\n    color: \"#3783ea\",\r\n    multiplier: 650,\r\n  },\r\n  recovered: {\r\n    color: \"#2c9947\",\r\n    multiplier: 650,\r\n  },\r\n  deaths: {\r\n    color: \"#e9113f\",\r\n    multiplier: 2400,\r\n  },\r\n};\r\n\r\nexport const showCirclesOnMap = (data, casesType = \"active\") =>\r\n  data.map((state, i) => {\r\n    if (state.statecode !== \"TT\") {\r\n      return (\r\n        <Circle\r\n          key={i}\r\n          center={[state.lat, state.lng]}\r\n          fillOpacity={0.3}\r\n          stroke={true}\r\n          color={casesTypeValues[casesType].color}\r\n          fillColor={casesTypeValues[casesType].color}\r\n          radius={\r\n            Math.sqrt(state[casesType]) * casesTypeValues[casesType].multiplier\r\n          }\r\n        >\r\n          <div className=\"popupdarkMode\">\r\n            <Popup key={state.statecode}>\r\n              <div className={\"info-container\"}>\r\n                <div className=\"info-name\">{state.state}</div>\r\n                <div className=\"info-active\">Active:{state.active}</div>\r\n                <div className=\"info-confirmed\">\r\n                  Recovered:{state.confirmed}\r\n                </div>\r\n                <div className=\"info-recovered\">\r\n                  Recovered:{state.recovered}\r\n                </div>\r\n                <div className=\"info-deaths\">Deaths: {state.deaths}</div>\r\n              </div>\r\n            </Popup>\r\n          </div>\r\n        </Circle>\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  });\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showCirclesOnMap } from \"../util\";\r\nimport \"./CircleMap.css\";\r\n\r\nconst zoom = 7;\r\nconst minLat = 27.1751;\r\nconst maxLat = 20.940737;\r\nconst minLong = 70.23846;\r\nconst maxLong = 93.781153;\r\n\r\nfunction CircleMap({ casesType, center, mapData, isDark }) {\r\n  return (\r\n    <div className={`map ${isDark && \"map--darkMode\"}`}>\r\n      <LeafletMap\r\n        zoomControl={false}\r\n        key=\"maps\"\r\n        center={center}\r\n        zoom={zoom}\r\n        maxZoom={10}\r\n        doubleClickZoom={true}\r\n        scrollWheelZoom={true}\r\n        dragging={true}\r\n        animate={true}\r\n        minZoom={4}\r\n        attributionControl={true}\r\n        bounds={[\r\n          [minLat, minLong],\r\n          [maxLat, maxLong],\r\n        ]}\r\n      >\r\n        <TileLayer\r\n          url={`${\r\n            isDark\r\n              ? \"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n              : \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          }`}\r\n          attribution={`${\r\n            isDark\r\n              ? '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\r\n              : 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n          }`}\r\n        />\r\n        {showCirclesOnMap(mapData, casesType, isDark)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CircleMap;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./Chart.css\";\r\n\r\nconst options = {\r\n  bezierCurve: false,\r\n  legend: {\r\n    display: false,\r\n  },\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        ticks: {\r\n          display: false,\r\n        },\r\n        gridLines: {\r\n          display: false,\r\n          drawBorder: false,\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        ticks: { display: false },\r\n        gridLines: {\r\n          display: false,\r\n          drawBorder: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst Charts = ({ data, isDark }) => {\r\n  const lineChart1 = data.cases_time_series ? (\r\n    <Line\r\n      data={{\r\n        labels: data.cases_time_series.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: data.cases_time_series.map(\r\n              ({ dailydeceased }) => dailydeceased\r\n            ),\r\n            label: \"Deaths\",\r\n            borderColor: \"#ff3333\",\r\n            fill: true,\r\n            backgroundColor: \"rgba(218, 31, 31, 0.5)\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        ...options,\r\n        title: {\r\n          display: true,\r\n          text: \"Deceased Cases\",\r\n          fontColor: `${isDark ? \"white\" : \"grey\"}`,\r\n          fontSize: 20,\r\n          position: \"left\",\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n  const lineChart2 = data.cases_time_series ? (\r\n    <Line\r\n      data={{\r\n        labels: data.cases_time_series.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: data.cases_time_series.map(\r\n              ({ dailyconfirmed }) => dailyconfirmed\r\n            ),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(56, 56, 244, 0.5)\",\r\n            borderWidth: 1,\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        ...options,\r\n        title: {\r\n          display: true,\r\n          text: \"Confirmed Cases\",\r\n          fontColor: `${isDark ? \"white\" : \"grey\"}`,\r\n          fontSize: 20,\r\n          position: \"left\",\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n  const lineChart3 = data.cases_time_series ? (\r\n    <Line\r\n      data={{\r\n        labels: data.cases_time_series.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: data.cases_time_series.map(\r\n              ({ dailyrecovered }) => dailyrecovered\r\n            ),\r\n            label: \"Recovered\",\r\n            borderColor: \"#33ff33\",\r\n            fill: true,\r\n            backgroundColor: \"rgba(56, 244,56 , 0.5)\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        ...options,\r\n        title: {\r\n          display: true,\r\n          text: \"Recovered Cases\",\r\n          fontSize: 20,\r\n          fontColor: `${isDark ? \"white\" : \"grey\"}`,\r\n          position: \"left\",\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <div className={`chart ${isDark && \"chart--darkMode\"}`}>{lineChart1}</div>\r\n      <div className={`chart ${isDark && \"chart--darkMode\"}`}>{lineChart2}</div>\r\n      <div className={`chart ${isDark && \"chart--darkMode\"}`}>{lineChart3}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default Charts;\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst inrformat = require(\"inrformat\");\r\n\r\nconst headerColumns = [\r\n  { id: \"state\", label: \"State\", align: \"left\" },\r\n  { id: \"code\", label: \"StateCode\", align: \"center\" },\r\n  {\r\n    id: \"active\",\r\n    label: \"Active\",\r\n\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"confirmed\",\r\n    label: \"Confirmed\",\r\n\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-IN\"),\r\n  },\r\n  {\r\n    id: \"recovered\",\r\n    label: \"Recovered\",\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-IN\"),\r\n  },\r\n  {\r\n    id: \"deaths\",\r\n    label: \"Deceased\",\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-IN\"),\r\n  },\r\n];\r\n\r\nexport default function StateInfoTable({ states, isDark }) {\r\n  const useStyles = makeStyles({\r\n    tablecontainer: {\r\n      backgroundColor: `${isDark ? \"black\" : \"white\"}`,\r\n      borderRadius: 10,\r\n      boxShadow: \"0 0 8px -4px rgba(0, 0, 0, 0.6)\",\r\n      marginBottom: 10,\r\n      marginTop: 10,\r\n      height: 600,\r\n    },\r\n    oddRow: {\r\n      backgroundColor: `${isDark ? \"#424242\" : \"#f3f2f8\"}`,\r\n    },\r\n    evenRow: {\r\n      backgroundColor: `${isDark ? \"#616161\" : \"#bdbdbd\"}`,\r\n    },\r\n    cellOfROw: isDark\r\n      ? { borderRadius: 15, border: 0, color: \"white\" }\r\n      : { borderRadius: 15, border: 0, color: \"black\" },\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  let i = 0;\r\n  return (\r\n    <TableContainer className={classes.tablecontainer}>\r\n      <Table stickyHeader aria-aria-label=\"Sticky Table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            {headerColumns.map((column) => (\r\n              <TableCell\r\n                key={column.id}\r\n                align={column.align}\r\n                style={\r\n                  isDark\r\n                    ? { backgroundColor: \"#1f1f1f\", color: \"white\", border: 0 }\r\n                    : {}\r\n                }\r\n              >\r\n                {column.label}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {states.map((state) => {\r\n            return (\r\n              <TableRow\r\n                key={Math.random() / Math.random()}\r\n                className={i++ % 2 ? classes.oddRow : classes.evenRow}\r\n              >\r\n                <TableCell\r\n                  key={state.state}\r\n                  align=\"left\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {state.state}\r\n                </TableCell>\r\n                <TableCell\r\n                  key={state.statecode}\r\n                  align=\"center\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {state.statecode}\r\n                </TableCell>\r\n                <TableCell\r\n                  key={Math.random() / Math.random()}\r\n                  align=\"center\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {inrformat(state.active)}\r\n                </TableCell>\r\n                <TableCell\r\n                  key={Math.random() / Math.random()}\r\n                  align=\"center\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {inrformat(state.confirmed)}\r\n                </TableCell>\r\n                <TableCell\r\n                  key={Math.random() / Math.random()}\r\n                  align=\"center\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {inrformat(state.recovered)}\r\n                </TableCell>\r\n                <TableCell\r\n                  key={Math.random() / Math.random()}\r\n                  align=\"center\"\r\n                  className={classes.cellOfROw}\r\n                >\r\n                  {inrformat(state.deaths)}\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport { latlong } from \"./constants\";\nimport \"leaflet/dist/leaflet.css\";\nimport StatusCard from \"./components/Card/Card\";\nimport CircleMap from \"./components/Map/CircleMap\";\nimport \"./App.css\";\nimport Charts from \"./components/Charts/Chart\";\nimport { prettyNumber } from \"./components/util\";\nimport StateInfoTable from \"./components/Table/Table\";\nfunction App() {\n  const [data, setData] = useState({});\n  const [darkMode, setDarkMode] = useState(getInitialMode());\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [states, setStatesData] = useState([]);\n  const [selectedState, setSelectedState] = useState(\"TT\");\n  const [selectedStateInfo, setSelectedStateInfo] = useState({});\n  const [casesType, setCasesType] = useState(\"active\");\n  const [mapCenter, setMapCenter] = useState([24.070541, 83.003948]);\n\n  useEffect(() => {\n    localStorage.setItem(\"dark\", JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  function getInitialMode() {\n    return JSON.parse(localStorage.getItem(\"dark\"));\n  }\n\n  const handleResize = (e) => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n  });\n\n  useEffect(() => {\n    fetch(\"https://api.covid19india.org/data.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        let DataofStates = [];\n        for (let i = 0; i < data.statewise.length; i++) {\n          for (let j = 0; j < latlong.length; j++) {\n            if (data.statewise[i].statecode === latlong[j].statecode) {\n              let temp = {\n                ...data.statewise[i],\n                lat: latlong[i].lat,\n                lng: latlong[i].long,\n                name: latlong[i].name,\n              };\n              DataofStates.push(temp);\n            }\n          }\n        }\n        setStatesData(DataofStates);\n        setSelectedStateInfo(DataofStates[0]);\n      });\n  }, []);\n\n  const onStateChange = (event) => {\n    const stateCodeOfSelectedState = event.target.value;\n    setSelectedState(stateCodeOfSelectedState);\n    console.log(\"statecode -----\", stateCodeOfSelectedState);\n    const stateData = states.filter((state) => {\n      return state.statecode === stateCodeOfSelectedState;\n    })[0];\n    setSelectedStateInfo(stateData);\n    setMapCenter([stateData.lat, stateData.lng]);\n  };\n\n  const countrySelect = (\n    <FormControl className=\"app_dropdown\">\n      <Select\n        style={\n          darkMode\n            ? {\n                backgroundColor: \"#1f1f1f\",\n                color: \"white\",\n              }\n            : {}\n        }\n        className=\"app_select\"\n        variant=\"outlined\"\n        value={selectedState}\n        onChange={onStateChange}\n      >\n        {states.map((state) => (\n          <MenuItem\n            key={state.statecode}\n            value={state.statecode}\n            style={{\n              backgroundColor: `${darkMode && \"#1f1f1f\"}`,\n              color: `${darkMode && \"white\"}`,\n            }}\n          >\n            {state.name}\n          </MenuItem>\n        ))}\n      </Select>\n      <FormHelperText style={darkMode ? { color: \"white\" } : {}}>\n        Select state from Here\n      </FormHelperText>\n    </FormControl>\n  );\n\n  return (\n    <div className={`app ${darkMode && \"dark-mode\"}`}>\n      <div className={`app_header ${darkMode && \"dark-mode-header\"}`}>\n        <nav className=\"navbar\">Wuhan Virus Tracker</nav>\n        <div className=\"toggle-container\">\n          <span style={{ color: darkMode ? \"grey\" : \"yellow\" }}>☀︎</span>\n          <span className=\"toggle\">\n            <input\n              type=\"checkbox\"\n              checked={darkMode}\n              className=\"checkbox\"\n              id=\"checkbox\"\n              onChange={() => setDarkMode((prevmode) => !prevmode)}\n            />\n            <label htmlFor=\"checkbox\" />\n          </span>\n          <span style={{ color: darkMode ? \"slateblue\" : \"grey\" }}>☾</span>\n        </div>\n      </div>\n      <div className=\"app_body\">\n        <div className=\"app_right_left\">\n          <div className=\"app_right\">\n            <div className=\"app_right_select\">{countrySelect}</div>\n            <div className=\"app_status\">\n              <StatusCard\n                isDark={darkMode}\n                onClick={(e) => setCasesType(\"active\")}\n                title=\"Active\"\n                active={casesType == \"active\"}\n                isColor1={true}\n                cases={\n                  windowWidth < 770\n                    ? prettyNumber(selectedStateInfo.active)\n                    : selectedStateInfo.active\n                }\n              />\n              <StatusCard\n                isDark={darkMode}\n                active={casesType == \"confirmed\"}\n                isColor2={true}\n                onClick={(e) => setCasesType(\"confirmed\")}\n                title=\"Confirmed\"\n                cases={\n                  windowWidth < 770\n                    ? prettyNumber(selectedStateInfo.confirmed)\n                    : selectedStateInfo.confirmed\n                }\n              />\n              <StatusCard\n                isDark={darkMode}\n                active={casesType == \"recovered\"}\n                isColor3={true}\n                onClick={(e) => setCasesType(\"recovered\")}\n                title=\"Recovered\"\n                cases={\n                  windowWidth < 770\n                    ? prettyNumber(selectedStateInfo.recovered)\n                    : selectedStateInfo.recovered\n                }\n              />\n              <StatusCard\n                isDark={darkMode}\n                active={casesType == \"deaths\"}\n                isColor4={true}\n                onClick={(e) => setCasesType(\"deaths\")}\n                title=\"Deaths\"\n                cases={\n                  windowWidth < 770\n                    ? prettyNumber(selectedStateInfo.deaths)\n                    : selectedStateInfo.deaths\n                }\n              />\n            </div>\n            <CircleMap\n              isDark={darkMode}\n              center={mapCenter}\n              casesType={casesType}\n              mapData={states}\n            />\n          </div>\n          <div className=\"app_left\">\n            <Charts isDark={darkMode} data={data} />\n          </div>\n        </div>\n        <div className=\"stateinfotable\">\n          <StateInfoTable states={states} isDark={darkMode} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}